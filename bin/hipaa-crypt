#!/usr/bin/env ruby

require 'hipaa-crypt'
require 'thor'
require 'active_support/core_ext/object/blank'

class HipaaCrypt::Cli < Thor

  def initialize(args=[], options={}, config={})
    super(args, {}, config)
    self.options = options_to_hash(options)
  end

  desc 're_encrypt MODEL', 're_encrypt a models attributes'

  def re_encrypt(*args)
    load_rails!
    check_for_rails!
    if options.delete :all
      re_encrypt_all(*args)
    else
      re_encrypt_one args.shift, *args
    end
  end

  desc 'version', 'print out the version'
  def default
    puts "HipaaCrypt #{HipaaCrypt::VERSION}" if options[:version] || options[:v]
  end

  default_task :default

  private

  def load_rails!
    require File.expand_path 'config/environment' if File.exists? File.expand_path 'config/environment.rb'
  end

  def all_rails_models
    check_for_rails!
    Rails.application.eager_load!
    models = ObjectSpace.each_object.select do |obj|
      obj.is_a?(Class) && obj <= HipaaCrypt::Attributes && obj.respond_to?(:re_encrypt)
    end
    models.sort_by { |model| model.respond_to?(:count) ? model.count : nil }
  end

  def check_for_rails!
    raise Exception, 're-encryption is only available in Rails at this time.' unless defined? Rails
  end

  def re_encrypt_one(model, *attrs)
    attrs = model.encrypted_attributes.keys unless attrs.present?
    attrs.map!(&:to_sym)
    try_eval(model).re_encrypt(*attrs, options)
  end

  def re_encrypt_all(*models)
    models = all_rails_models unless models.present?
    models.map { |string| try_eval string }.each do |model|
      model.re_encrypt *model.encrypted_attributes.keys, options
    end
  end

  def options_to_hash(options)
    options.each_with_index.reduce({}) do |hash, (key, index)|
      hash_key = key.sub(/^\-{1,2}/, '').to_sym
      value    = options[index + 1]

      key_is_key     = /^\-{1,2}?/ =~ key
      value_is_value = /^[^\-]/ =~ value

      if key_is_key && value_is_value
        hash[hash_key] = try_eval value
      elsif key_is_key
        hash[hash_key] = true
      end
      hash
    end
  end

  def try_eval(string)
    eval(string)
  rescue Exception => e
    string
  end
end

HipaaCrypt::Cli.start(ARGV)